#!/bin/bash
set -eou pipefail

trap 'echo "[error] ${BASH_SOURCE[0]}:$LINENO" >&2; exit 3;' ERR

RED='\033[0;31m'
NC='\033[0m' # No Color

function error {
	msg="$(date '+%F %T') - ${BASH_SOURCE[0]}:${BASH_LINENO[0]}: ${*}"
	>&2 echo -e "${RED}${msg}${NC}"
	exit 2
}

dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
project_dir="$(cd "$dir/../.." && pwd)"
root_dir="$(cd "$project_dir/../../.." && pwd)"

# shellcheck source=./vars.sample.sh
. "$dir/vars.sh"

project="$key"
var_dev="$dev"
var_container="$container"
var_container_type="$container_type"
var_allow_container_type="$allow_container_type"
var_container_network="$container_network"
var_container_opts="$container_opts"
var_root="$root"
var_run_file="$run_file"
var_force_vault="$force_vault"

last_index=1

# shellcheck disable=SC2214
while getopts ':efimnps-:' OPT; do
	last_index="$OPTIND"
	if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
		OPT="${OPTARG%%=*}"       # extract long option name
		OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
		OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
	fi
	case "$OPT" in
		e|enter ) enter='true';;
		f|force ) args+=( "--force" );;
		i|inside ) inside='true';;
		m|multiple ) multiple='true';;
		n|next ) args+=( "--next" );;
		p|prepare ) args+=( "--prepare" );;
		s|fast ) args+=( "--fast" );;
		debug ) args+=( "--debug" );;
		\? ) error "[error] unknown short option: -${OPTARG:-}";;
		?* ) error "[error] unknown long option: --${OPT:-}";;
	esac
done

if [ "$last_index" != "$OPTIND" ]; then
	args+=( "--" );
fi

shift $((OPTIND-1))

if [ "$var_allow_container_type" != 'true' ]; then
	if [ "$var_container_type" != 'docker' ] && [ "$var_container_type" != 'podman' ]; then
		error "[error] unsupported container type: $var_container_type"
	fi
fi

cmd=( "$var_container_type" )

if [ "$var_root" = 'true' ]; then
    cmd=( sudo "$var_container_type" )
fi

volumes=( -v "${project_dir}:/main" )

if [ "$var_dev" = 'true' ]; then
	mkdir -p "${project_dir}/dev"
	ln -rsfT "${root_dir}" "${project_dir}/dev/link"
	volumes+=( -v "${root_dir}:/main/dev" )
fi

[ "${inside:-}" = 'true' ] && project_dir_inside="$project_dir" || project_dir_inside="/main"
inner_cmd=( "$var_run_file" --project-dir="$project_dir_inside" ${args[@]+"${args[@]}"} "${@}" )

if [ "${enter:-}" = 'true' ]; then
    mkdir -p "${project_dir}/tmp"
    echo "${inner_cmd[@]+"${inner_cmd[@]}"}" > "${project_dir}/tmp/cmd"
    inner_cmd=( /bin/bash )
fi

if [ "${inside:-}" = 'true' ]; then
    "${inner_cmd[@]}" || error "[error] project run - init (inside)"
else
	cmd_args=()

	if [ "${multiple:-}" != 'true' ]; then
		cmd_args+=( --name="local-ctl-$project" )
	fi

	if [ -n "$var_container_network" ]; then
		"${cmd[@]}" network inspect "$var_container_network" >/dev/null 2>&1 || \
			"${cmd[@]}" network create --driver bridge "$var_container_network"
		cmd_args+=( --network "$var_container_network" )
	fi

	if [ -n "$var_container_opts" ]; then
		mapfile -td ' ' var_container_args < <(printf '%s' "${var_container_opts:-}")
		cmd_args+=( ${var_container_args[@]+"${var_container_args[@]}"} )
	fi

	"${cmd[@]}" run --rm -it \
		${cmd_args[@]+"${cmd_args[@]}"} \
		--workdir='/main' \
		-e "FORCE_VAULT=$var_force_vault" \
		"${volumes[@]}" \
		"$var_container" \
		"${inner_cmd[@]}" \
		|| error "[error] project run - init"
fi
