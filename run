#!/bin/bash
set -eou pipefail

trap 'echo "[error] ${BASH_SOURCE[0]}:$LINENO" >&2; exit 3;' ERR

RED='\033[0;31m'
NC='\033[0m' # No Color

function error {
	msg="$(date '+%F %T') - ${BASH_SOURCE[0]}:${BASH_LINENO[0]}: ${*}"
	>&2 echo -e "${RED}${msg}${NC}"
	exit 2
}

ctl_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
main_env_dir="${ctl_dir:?}/env-main"

if [ -L "$main_env_dir" ]; then
	main_env_dir="$(readlink -f "$main_env_dir")"
fi

command="${1:-}"

if [ -z "$command" ]; then
	error "[error] no command entered"
fi

shift;

case "$command" in
	"setup"|"s")
		ext_repo_default=${1:-}
		ext_repo_branch_default=${2:-master}

		echo -e "$(date '+%F %T') Setup started at $(date '+%F %T')"

		git_repo=''
		git_branch=''

		if [ -d "$main_env_dir" ]; then
			git_repo=$(git --git-dir="$main_env_dir/.git" remote get-url origin || :);
		fi

		if [ -z "$git_repo" ]; then
			rm -rf "$main_env_dir"

			if [ -z "$ext_repo_default" ]; then
				read -r -e -p "Enter the main (global) git environment repository: " \
					-i "your-repo.git" git_repo

				# https://github.com/koalaman/shellcheck/issues/1029
				# shellcheck disable=SC2034
				read -r -e -p "Enter the repository branch: " \
					-i "master" git_branch
			else
				git_repo="$ext_repo_default"
				git_branch="${ext_repo_branch_default:-master}"
			fi

			git config --global credential.helper store
			git clone --branch "$git_branch" "$git_repo" "$main_env_dir"
		fi
		;;
	"reset")
		rm -rf "$main_env_dir"
		rm -rf "$ctl_dir/tmp"
		;;
	"stop-all")
		# shellcheck source=./files/env.sample.sh
		source "${ctl_dir}/env-main/env.sh"

		var_container_type="${container_type:-}"
		var_root="${root:-}"
		cmd=( "$var_container_type" )

		if [ "$var_root" = 'true' ]; then
			cmd=( sudo "$var_container_type" )
		fi

		mapfile -t list < <("${cmd[@]}" ps -q)
		[[ ${#list[@]} -gt 0 ]] && "${cmd[@]}" container stop "${list[@]}"
		;;
	"rm-all")
		# shellcheck source=./files/env.sample.sh
		source "${ctl_dir}/env-main/env.sh"

		var_container_type="${container_type:-}"
		var_root="${root:-}"
		cmd=( "$var_container_type" )

		if [ "$var_root" = 'true' ]; then
			cmd=( sudo "$var_container_type" )
		fi

		mapfile -t list < <("${cmd[@]}" ps -aq)
		[[ ${#list[@]} -gt 0 ]] && "${cmd[@]}" container rm -f "${list[@]}"
		;;
	"enter")
		# shellcheck source=./files/env.sample.sh
		source "${ctl_dir}/env-main/env.sh"

		var_container="$container"
		var_container_type="${container_type:-}"
		var_allow_container_type="${allow_container_type:-}"
		var_container_network="${container_network:-}"
		var_container_opts="${container_opts:-}"
		var_root="${root:-}"

		if [ -z "$var_container_type" ]; then
			var_container_type="docker"
		fi

		if [ "$var_allow_container_type" != 'true' ]; then
			if [ "$var_container_type" != 'docker' ] && [ "$var_container_type" != 'podman' ]; then
				error "[error] unsupported container type: $var_container_type"
			fi
		fi

		cmd=( "$var_container_type" )

		if [ "$var_root" = 'true' ]; then
			cmd=( sudo "$var_container_type" )
		fi

		cmd_args=()

		if [ -n "$var_container_network" ]; then
			"${cmd[@]}" network inspect "$var_container_network" >/dev/null 2>&1 || \
    			"${cmd[@]}" network create --driver bridge "$var_container_network"
			cmd_args+=( --network "$var_container_network" )
		fi

		if [ -n "$var_container_opts" ]; then
			mapfile -td ' ' var_container_args < <(printf '%s' "${var_container_opts:-}")
			cmd_args+=( ${var_container_args[@]+"${var_container_args[@]}"} )
		fi

		"${cmd[@]}" run --rm -it \
			--name="ctl-init" \
			--workdir="/main/tmp" \
			-v "${ctl_dir}/tmp:/main/tmp" \
			-e "UID=$(id -u)" \
			-e "GID=$(id -g)" \
			${cmd_args[@]+"${cmd_args[@]}"} \
			"$var_container" \
			|| error "[error] $command"
		;;
	"launch"|"l")
		"$ctl_dir/launch" "${@}"
		;;
	"unique:launch")
		args=( "$ctl_dir/launch" "${@}" )
		echo "$command: run-one ${args[*]}" >&2
		run-one "${args[@]}"
		;;
	"unique:launch:force")
		args=( "$ctl_dir/launch" "${@}" )
		echo "$command: run-this-one ${args[*]}" >&2
		run-this-one "${args[@]}"
		;;
	"upgrade"|"u")
		"$ctl_dir/ctx/scripts/main.sh" "$command" "${@}"
		;;
	*)
		echo -e "${RED}[error] invalid command: $command${NC}"
		exit 1
		;;
esac
